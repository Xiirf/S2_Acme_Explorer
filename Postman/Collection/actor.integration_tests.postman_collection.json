{
	"info": {
		"_postman_id": "d5a98f1c-e7bb-4907-96a0-3b8a63c6e6f1",
		"name": "Acme-Explorer Actors",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "actors",
			"item": [
				{
					"name": "GET  actors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "818be24f-0793-4470-a53d-abc5743aac0b",
								"exec": [
									"const echoPostRequest = {",
									"    url: pm.variables.get('host') + '/actors',",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json',",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"name\": \"Anto単o\",",
									"            \"surname\": \"Banderas\",",
									"            \"email\": \"f@f.com\",",
									"            \"phone\": \"012459786\",",
									"            \"password\": \"pwd\",",
									"            \"adress\": \"algun lugar\",",
									"            \"role\": \"Manager\"",
									"        })",
									"    }",
									"};",
									"pm.sendRequest(echoPostRequest)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e720dc66-9945-433b-8107-7aedab303f2c",
								"exec": [
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console, allErrors: true}), schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"_id\", \"name\", \"email\", \"surname\", \"password\", \"role\", \"createdAt\"],",
									"    \"properties\": {",
									"        \"properties\": {",
									"            \"_id\" : {",
									"                \"type\" : \"string\"",
									"            }, \"name\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"email\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"surname\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"password\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"phone\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"adress\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"role\" : {",
									"                 \"enum\" : ['Administrator', 'Manager', 'Explorer', 'Sponsor']",
									"            }, \"createdAt\" : {",
									"                 \"type\": \"string\"",
									"            }, \"__v\" : {",
									"                 \"type\" : \"integer\"",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200) });",
									"pm.test(\"Return 1 item\", function () { pm.expect(pm.response.json().length).to.eql(1)});",
									"pm.test(\"Return the right item\", function () { pm.expect(pm.response.json()[0].name).to.eql(\"Anto単o\") && pm.expect(pm.response.json()[0].surname).to.eql(\"Banderas\")});",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(ajv.validate(pm.response.json()[0], schema), JSON.stringify(ajv.errors)).to.be.true;",
									"});",
									"const echoDeleteRequest = {",
									"  url: pm.variables.get('host') + '/actors/' + pm.response.json()[0]._id,",
									"  method: 'DELETE',",
									"};",
									"pm.sendRequest(echoDeleteRequest)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c2aad26-b05f-4324-9213-8bc40b65f5db",
								"exec": [
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console, allErrors: true}), schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"_id\", \"name\", \"email\", \"surname\", \"password\", \"role\", \"createdAt\"],",
									"    \"properties\": {",
									"        \"properties\": {",
									"            \"_id\" : {",
									"                \"type\" : \"string\"",
									"            }, \"name\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"email\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"surname\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"password\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"phone\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"adress\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"role\" : {",
									"                 \"enum\" : ['Administrator', 'Manager', 'Explorer', 'Sponsor']",
									"            }, \"createdAt\" : {",
									"                 \"type\": \"string\"",
									"            }, \"__v\" : {",
									"                 \"type\" : \"integer\"",
									"            }",
									"        }",
									"    }",
									"}",
									"pm.test(\"Status code is 201\", function () { pm.expect(pm.response.code).to.be.oneOf([201]) });",
									"pm.test(\"Return the created item\", function () { pm.expect(pm.response.json().name).to.eql(\"Medor\") && pm.expect(pm.response.json().surname).to.eql(\"pekino\")});",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(ajv.validate(pm.response.json(), schema), JSON.stringify(ajv.errors)).to.be.true;",
									"});",
									"",
									"const echoDeleteRequest = {",
									"    url: pm.variables.get('host') + '/actors/' + pm.response.json()._id,",
									"    method: 'DELETE',",
									"};",
									"pm.sendRequest(echoDeleteRequest)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Medor\",\n    \"surname\": \"pekino\",\n    \"email\": \"f@f.com\",\n    \"phone\": \"012459786\",\n    \"password\": \"s\",\n    \"adress\": \"d\",\n    \"role\": \"Administrator\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET actors id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "186208b9-4dcc-4e25-83de-13e9a6e6bb0a",
								"exec": [
									"const echoPostRequest = {",
									"    url: pm.variables.get('host') + '/actors',",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json',",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"name\": \"Anto単o\",",
									"            \"surname\": \"Banderas\",",
									"            \"email\": \"f@f.com\",",
									"            \"phone\": \"012459786\",",
									"            \"password\": \"pwd\",",
									"            \"adress\": \"algun lugar\",",
									"            \"role\": \"Manager\"",
									"        })",
									"    }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"        if (err === null) {",
									"            pm.collectionVariables.set('lastActorSubmittedId', res.json()._id)",
									"        }",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e611c61-ca75-49b8-9de3-507761e7ae9a",
								"exec": [
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console, allErrors: true}), schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"_id\", \"name\", \"email\", \"surname\", \"password\", \"role\", \"createdAt\"],",
									"    \"properties\": {",
									"        \"properties\": {",
									"            \"_id\" : {",
									"                \"type\" : \"string\"",
									"            }, \"name\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"email\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"surname\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"password\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"phone\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"adress\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"role\" : {",
									"                 \"enum\" : ['Administrator', 'Manager', 'Explorer', 'Sponsor']",
									"            }, \"createdAt\" : {",
									"                 \"type\": \"string\"",
									"            }, \"__v\" : {",
									"                 \"type\" : \"integer\"",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200) });",
									"pm.test(\"Return the right item\", function () { pm.expect(pm.response.json().name).to.eql(\"Anto単o\") && pm.expect(pm.response.json().surname).to.eql(\"Banderas\")});",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(ajv.validate(pm.response.json(), schema), JSON.stringify(ajv.errors)).to.be.true;",
									"});",
									"const echoDeleteRequest = {",
									"  url: pm.variables.get('host') + '/actors/' + pm.response.json()._id,",
									"  method: 'DELETE',",
									"};",
									"pm.sendRequest(echoDeleteRequest)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/plain",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/actors/{{lastActorSubmittedId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"{{lastActorSubmittedId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT actors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8978b6a8-0064-425d-a4c5-ac5c584c9a2f",
								"exec": [
									"const echoPostRequest = {",
									"    url: pm.variables.get('host') + '/actors',",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json',",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"name\": \"Anto単o\",",
									"            \"surname\": \"Banderas\",",
									"            \"email\": \"f@f.com\",",
									"            \"phone\": \"012459786\",",
									"            \"password\": \"pwd\",",
									"            \"adress\": \"algun lugar\",",
									"            \"role\": \"Manager\"",
									"        })",
									"    }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"        if (err === null) {",
									"            pm.collectionVariables.set('lastActorSubmittedId', res.json()._id)",
									"        }",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95a0f3bb-a146-47e1-8cf6-ec34acdf0adc",
								"exec": [
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console, allErrors: true}), schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"_id\", \"name\", \"email\", \"surname\", \"password\", \"role\", \"createdAt\"],",
									"    \"properties\": {",
									"        \"properties\": {",
									"            \"_id\" : {",
									"                \"type\" : \"string\"",
									"            }, \"name\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"email\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"surname\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"password\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"phone\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"adress\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"role\" : {",
									"                 \"enum\" : ['Administrator', 'Manager', 'Explorer', 'Sponsor']",
									"            }, \"createdAt\" : {",
									"                 \"type\": \"string\"",
									"            }, \"__v\" : {",
									"                 \"type\" : \"integer\"",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200) });",
									"pm.test(\"Return the right updated item\", function () { pm.expect(pm.response.json().phone).to.eql(\"987654321\") && pm.expect(pm.response.json().role).to.eql(\"Sponsor\")});",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(ajv.validate(pm.response.json(), schema), JSON.stringify(ajv.errors)).to.be.true;",
									"});",
									"const echoDeleteRequest = {",
									"  url: pm.variables.get('host') + '/actors/' + pm.response.json()._id,",
									"  method: 'DELETE',",
									"};",
									"pm.sendRequest(echoDeleteRequest)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Anto単o\",\n    \"surname\": \"Banderas\",\n    \"email\": \"f@f.com\",\n    \"phone\": \"987654321\",\n    \"password\": \"mdp\",\n    \"adress\": \"algun lugar\",\n    \"role\": \"Sponsor\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors/{{lastActorSubmittedId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"{{lastActorSubmittedId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH actors ban",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8978b6a8-0064-425d-a4c5-ac5c584c9a2f",
								"exec": [
									"const echoPostRequest = {",
									"    url: pm.variables.get('host') + '/actors',",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json',",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"name\": \"Anto単o\",",
									"            \"surname\": \"Banderas\",",
									"            \"email\": \"f@f.com\",",
									"            \"phone\": \"012459786\",",
									"            \"password\": \"pwd\",",
									"            \"adress\": \"algun lugar\",",
									"            \"role\": \"Manager\"",
									"        })",
									"    }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"        if (err === null) {",
									"            pm.collectionVariables.set('lastActorSubmittedId', res.json()._id)",
									"        }",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95a0f3bb-a146-47e1-8cf6-ec34acdf0adc",
								"exec": [
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console, allErrors: true}), schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [\"_id\", \"name\", \"email\", \"surname\", \"password\", \"role\", \"createdAt\"],",
									"    \"properties\": {",
									"        \"properties\": {",
									"            \"_id\" : {",
									"                \"type\" : \"string\"",
									"            }, \"name\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"email\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"surname\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"password\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"phone\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"adress\" : {",
									"                 \"type\" : \"string\"",
									"            }, \"role\" : {",
									"                 \"enum\" : ['Administrator', 'Manager', 'Explorer', 'Sponsor']",
									"            }, \"createdAt\" : {",
									"                 \"type\": \"string\"",
									"            }, \"__v\" : {",
									"                 \"type\" : \"integer\"",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200) });",
									"pm.test(\"Return the right updated item\", function () { pm.expect(pm.response.json().name).to.eql(\"Anto単o\") && pm.expect(pm.response.json().banned).to.eql(true)});",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(ajv.validate(pm.response.json(), schema), JSON.stringify(ajv.errors)).to.be.true;",
									"});",
									"const echoDeleteRequest = {",
									"  url: pm.variables.get('host') + '/actors/' + pm.response.json()._id,",
									"  method: 'DELETE',",
									"};",
									"pm.sendRequest(echoDeleteRequest)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"banned\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors/{{lastActorSubmittedId}}/ban",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"{{lastActorSubmittedId}}",
								"ban"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE actors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78292d61-a821-4a70-aafa-77ebe7aeb364",
								"exec": [
									"const echoPostRequest = {",
									"    url: pm.variables.get('host') + '/actors',",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json',",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            \"name\": \"Anto単o\",",
									"            \"surname\": \"Banderas\",",
									"            \"email\": \"f@f.com\",",
									"            \"phone\": \"012459786\",",
									"            \"password\": \"pwd\",",
									"            \"adress\": \"algun lugar\",",
									"            \"role\": \"Manager\"",
									"        })",
									"    }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    console.log(err ? err : res.json());",
									"        if (err === null) {",
									"            pm.collectionVariables.set('lastActorSubmittedId', res.json()._id)",
									"        }",
									"    })"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d4ad2f93-dbe0-4db6-bcfb-56790f8452c6",
								"exec": [
									"pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204) });",
									"const echoGetRequest = {",
									"  url: pm.variables.get('host') + '/actors/' + pm.collectionVariables.get('lastActorSubmittedId'),",
									"  method: 'GET',",
									"};",
									"pm.sendRequest(echoGetRequest, function (err, res) {",
									"    pm.test(\"Item has been deleted\", function () { pm.expect(res.code).to.be.oneOf([404]) });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/actors/{{lastActorSubmittedId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"{{lastActorSubmittedId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cfb2b784-3e9c-4a33-a1ec-6f6ee753dd81",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "30355f02-6e7d-47dd-a3b5-57cbfac2c3d9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "b49e15f4-04a0-4850-b3fb-ca90477b1511",
			"key": "host",
			"value": "localhost:8080/v1",
			"type": "string"
		},
		{
			"id": "b9f1ff55-8528-40fc-8f58-4faf694a0fe1",
			"key": "lastActorSubmittedId",
			"value": "5e471a95a3c3951536a79752",
			"type": "string"
		},
		{
			"id": "a26e6339-dc64-4a84-bc7d-25c6409ce67d",
			"key": "lastSponsorshipSubmittedId",
			"value": "5e432489f5bce7664b79e0b4",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}